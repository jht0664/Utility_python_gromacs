#!/usr/bin/env python3
# ver 0.1 - coding python by Hyuntae Jung on  2/18/2017

import argparse
parser = argparse.ArgumentParser(
	formatter_class=argparse.ArgumentDefaultsHelpFormatter, 
	description='Calculate Average 1D-Number Profile from .dnums or .massf file')
## args
parser.add_argument('-i', '--input', default='traj.dnums.align', nargs='?', 
	help='input (aligned) dnumber profile file generated by dn-auto.py')
parser.add_argument('-avg', '--avg', default='traj.dnums', nargs='?', 
	help='input dnumber profile file generated by dn-auto.py to get average written in the first comment line.')
parser.add_argument('-b', '--begin', default=0, nargs='?', 
	help='index of beginning frame [0:N-1]')
parser.add_argument('-e', '--end', default=-1, nargs='?', 
	help='index of end frame [0:N-1]. If negative, use end frame')
parser.add_argument('-tol', '--tol', default=0.0, nargs='?', 
	help='tolerance for block average (> 0 and < 1). (recommend 1.0 for 1st trial). If 0, no block average. If > 1, # frames to average')
parser.add_argument('-o', '--output', default='INPUT.avg', nargs='?', 
	help='output file for delta_number trajectory')
parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.1')
# read args
args = parser.parse_args()
# default for args
args.input = args.input if args.input is not None else 'traj.dnums.align'
if args.output is 'INPUT.avg':
	args.output = args.input+'.avg'
args.avg = args.avg if args.avg is not None else 'traj.dnums'
args.begin = args.begin if args.begin is not None else 0
args.end = args.end if args.end is not None else -1
args.begin = int(args.begin)
args.end = int(args.end)
args.tol = args.tol if args.tol is not None else 0.0
args.tol = float(args.tol)

## Check arguments for log
print("===============================")
print("input filename   = ", args.input)
print("input filename for avg  = ", args.avg)
print("index of beginning frame = ", args.begin)
if args.end != -1:
	print("index of end frame = ", args.end)
else:
	print("Set end frame is the end.")
if args.tol == 0.0:
	print("Set no bloack average")
elif args.tol <= 1.0: 
	print("tolerance for block average = %f" %args.tol)
elif args.tol > 1.0:
	print("set block length = %d" %(int(args.tol)))
print("output number profile filename = ", args.output)

## timer
import time
start_clock = time.clock() # process time
start_wall = time.time() # wall time

## import modules
import hjung
from hjung import *
import numpy as np

## check argument
if args.tol < 0.0:
	raise ValueError("wrong input of tolerance, %f" %args.tol)
elif args.tol >= 1.0: 
	print("Warning: tolerance %f is assigned to block_size, %d" %(args.tol, int(args.tol)))
else:
	print("="*30)

## read .dnums file
print("="*30)
try:
	xvg = open(args.avg, 'r')
except IOError:
	print("Problem with opening ",args.avg)
	exit()
for line in xvg:
	line = line.strip()
	line = line.rsplit()
	line = line[3].split(',')
	total_average = line[0]
	total_average = float(total_average)
	break
xvg.close()
print("Average = %f" %total_average)

## read .dnums.align file
print("="*30)
number_1d_t = np.loadtxt(args.input, comments='#')
print("Total trajecotry has %d frames." %(len(number_1d_t)))
if args.end >= len(number_1d_t):
	print("Your input file has %d, but end frame sets %d" %(len(number_1d_t), args.end))
	raise ValueError("end frame is beyond trajectory")
if args.end < 0:
	number_1d_t = number_1d_t[args.begin:]
else:
	number_1d_t = number_1d_t[args.begin:args.end]
print("Done: reading input file")

## we want to get number, not delta number. Need to add
number_1d_t = number_1d_t + total_average

## block average to get stable volume (or number density)
print("="*30)
block_length = hjung.analyze.opt_block_length_1d_t(number_1d_t,args.tol) 
number_1d_t = hjung.analyze.block_average_1d(number_1d_t,block_length)
print("Done: Block average")

## average number profile and std
# use numpy.mean(array,axis=0) to avoid transpose cost
number_avg = np.mean(number_1d_t, axis=0)
number_std = np.std(number_1d_t, axis=0)
number = np.column_stack((number_avg,number_std))

## save averaged number profile
print("="*30)
np.savetxt(args.output, number, 
	header='begin frame = %d, end frame = %d, generated by Hyuntae python code' %(args.begin,args.end), fmt='%f', comments='# ')
print("Finished saving averaged values.")

print("="*30)
print(time.clock() - start_clock, "seconds process time")
print(time.time() - start_wall, "seconds wall time")
